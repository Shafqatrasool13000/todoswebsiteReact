{"version":3,"sources":["components/ReactTodo/todo.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","useState","myData","setmyData","lists","localStorage","getItem","JSON","parse","myLocalStorage","myTodoItems","setmyTodoItems","editId","seteditId","toggleButton","settoggleButton","addItem","map","curVal","id","name","uniqueId","Date","getTime","toString","alert","useEffect","setItem","stringify","className","src","alt","type","placeholder","value","onKeyPress","event","key","onPressKey","onChange","target","onClick","curElem","index","edited_Item_Id","find","currentValue","editItem","updateTodosList","filter","deleteItem","data-sm-link-text","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PA+JeA,EA7IF,WAAM,MAEWC,mBAAS,IAFpB,mBAEVC,EAFU,KAEFC,EAFE,OAIqBF,mBAjBjB,WACrB,IAAMG,EAAQC,aAAaC,QAAQ,eACnC,OAAIF,EAEGG,KAAKC,MAAMJ,GAIT,GASsCK,IAJ9B,mBAIVC,EAJU,KAIGC,EAJH,OAMWV,mBAAS,MANpB,mBAMVW,EANU,KAMFC,EANE,OAQuBZ,oBAAS,GARhC,mBAQVa,EARU,KAQIC,EARJ,KAWXC,EAAU,WACd,GAAKd,EAKA,GAAIA,GAAUY,EACjBH,EACKD,EAAYO,KAAI,SAACC,GACpB,OAAIA,EAAOC,KAAOP,EACL,2BAAIM,GAAX,IAAmBE,KAAMlB,IAGfgB,MAQdH,GAAgB,GAChBZ,EAAU,IACVU,EAAU,UAGX,CACH,IAAMQ,EAAW,CACfF,IAAI,IAAIG,MAAOC,UAAUC,WACzBJ,KAAMlB,GAERS,EAAe,GAAD,mBAAKD,GAAL,CAAkBW,KAChClB,EAAU,SA9BVsB,MAAM,qBAmEV,OAHAC,qBAAU,WACRrB,aAAasB,QAAQ,cAAepB,KAAKqB,UAAUlB,MAClD,CAACA,IACG,mCAEL,qBAAKmB,UAAU,WAAf,SACE,sBAAKA,UAAU,YAAf,UACE,mCACE,qBAAKC,IAAI,oBAAoBC,IAAI,aACjC,sEAEF,sBAAKF,UAAU,WAAf,UACE,uBACEG,KAAK,OACLC,YAAY,kBACZJ,UAAU,eACVK,MAAOhC,EACPiC,WAAY,SAACC,GAAD,OAvBL,SAACA,GACf,GAAe,UAAZA,EAAMC,IACP,OAAOrB,IAqBmBsB,CAAWF,IAChCG,SAAU,SAACH,GAAD,OAAWjC,EAAUiC,EAAMI,OAAON,UAG7CpB,EACC,mBAAGe,UAAU,sBAAsBY,QAASzB,IAE5C,mBAAGa,UAAU,qBAAqBY,QAASzB,OAI/C,qBAAKa,UAAU,YAAf,SACGnB,EAAYO,KAAI,SAACyB,GAChB,OACE,sBAAKb,UAAU,WAAf,UACE,6BAAKa,EAAQtB,OACb,sBAAKS,UAAU,WAAf,UACE,mBACEA,UAAU,sBAAsBY,QAC9B,kBAlEH,SAACE,GAEhB,IAAMC,EAAiBlC,EAAYmC,MAAK,SAACC,GAAD,OAAkBA,EAAa3B,KAAOwB,KAG9E5B,GAAgB,GAChBZ,EAAUyC,EAAexB,MACzBP,EAAU8B,GA2DcI,CAASL,EAAQvB,OAG3B,mBACEU,UAAU,2BACVY,QAAS,kBA3DR,SAACE,GAElB,IAAMK,EAAkBtC,EAAYuC,QAAO,SAACH,GAC1C,OAAOA,EAAa3B,KAAOwB,KAE7BhC,EAAeqC,GAsDgBE,CAAWR,EAAQvB,YAVTuB,EAAQvB,SAkB7C,qBAAKU,UAAU,YAAf,SACE,wBACEA,UAAU,eACVsB,oBAAkB,aAClBV,QA/DQ,WAChB9B,EAAe,KA2DT,SAIE,2DCzIGyC,EATH,WACV,OAAO,mCAEL,cAAC,EAAD,OCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.adc6f8fc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './style.css'\r\n\r\n\r\n//Get Data from local Storage\r\nconst myLocalStorage = () => {\r\n  const lists = localStorage.getItem(\"myTodosList\");\r\n  if (lists) {\r\n     \r\n  return JSON.parse(lists);\r\n    \r\n} else {\r\n  \r\n    return [];\r\n\r\n  }\r\n}\r\n\r\nconst Todo = () => {\r\n  //New Data State Managments\r\n  const [myData, setmyData] = useState(\"\")\r\n //Old and New Data Managment\r\n  const [myTodoItems, setmyTodoItems] = useState(myLocalStorage())\r\n  //Id Managment\r\n  const [editId, seteditId] = useState(null)\r\n  //Changing button Managment\r\n  const [toggleButton, settoggleButton] = useState(false)\r\n  \r\n  //Add new Item Check\r\n  const addItem = () => {\r\n    if (!myData) {\r\n      alert('Please fill data')\r\n      //Edit Item Check\r\n    } \r\n   \r\n    else if (myData && toggleButton) {\r\n      setmyTodoItems(\r\n           myTodoItems.map((curVal) => {\r\n        if (curVal.id === editId) {\r\n              return {...curVal, name: myData }\r\n              }\r\n             \r\n            else{return curVal};\r\n          \r\n          \r\n          }\r\n          \r\n          ));\r\n\r\n        \r\n          settoggleButton(false)\r\n          setmyData(\"\")\r\n          seteditId(null)\r\n    }\r\n    // Add New Item having Old Items with it\r\n    else {\r\n      const uniqueId = {\r\n        id: new Date().getTime().toString(),\r\n        name: myData\r\n      }\r\n      setmyTodoItems([...myTodoItems, uniqueId])\r\n      setmyData('');\r\n    }\r\n  }\r\n  //Edit Item Logic\r\n  const editItem = (index) => {\r\n    \r\n    const edited_Item_Id = myTodoItems.find((currentValue) => currentValue.id === index\r\n    )\r\n\r\n    settoggleButton(true);\r\n    setmyData(edited_Item_Id.name)\r\n    seteditId(index);\r\n\r\n\r\n  }\r\n  //Delete Single Item in Todos\r\n  const deleteItem = (index) => {\r\n\r\n    const updateTodosList = myTodoItems.filter((currentValue) => {\r\n      return currentValue.id !== index\r\n    })\r\n    setmyTodoItems(updateTodosList);\r\n  }\r\n  //Delete All Data\r\n  const deleteAll = () => {\r\n    setmyTodoItems([]);\r\n  }\r\n  //Add Data by Enter key\r\n  const onPressKey=(event)=>{\r\n     if(event.key==='Enter'){\r\n       return addItem()\r\n     }\r\n  }\r\n  //Add Item to Local Storage\r\n  useEffect(() => {\r\n    localStorage.setItem(\"myTodosList\", JSON.stringify(myTodoItems));\r\n  }, [myTodoItems])\r\n  return <>\r\n  {/* Render All Item */}\r\n    <div className=\"main-div\">\r\n      <div className=\"child-div\">\r\n        <figure>\r\n          <img src=\"./images/todo.svg\" alt=\"todologo\" />\r\n          <figcaption>Add Your List Here ✌</figcaption>\r\n        </figure>\r\n        <div className=\"addItems\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"✍ Add Item\"\r\n            className=\"form-control\"\r\n            value={myData}\r\n            onKeyPress={(event)=>onPressKey(event)}\r\n            onChange={(event) => setmyData(event.target.value)}\r\n          />\r\n          {/* ToggleButton Update  */}\r\n          {toggleButton ? (\r\n            <i className=\"far fa-edit add-btn\" onClick={addItem}></i>\r\n          ) : (\r\n            <i className=\"fa fa-plus add-btn\" onClick={addItem}></i>\r\n          )}\r\n        </div>\r\n        {/* show our items  */}\r\n        <div className=\"showItems\">\r\n          {myTodoItems.map((curElem) => {\r\n            return (\r\n              <div className=\"eachItem\" key={curElem.id}>\r\n                <h3>{curElem.name}</h3>\r\n                <div className=\"todo-btn\">\r\n                  <i\r\n                    className=\"far fa-edit add-btn\" onClick={\r\n                      () => editItem(curElem.id)\r\n                    }\r\n                  ></i>\r\n                  <i\r\n                    className=\"far fa-trash-alt add-btn\"\r\n                    onClick={() => deleteItem(curElem.id)}></i>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        {/* Remove all button  */}\r\n        <div className=\"showItems\">\r\n          <button\r\n            className=\"btn effect04\"\r\n            data-sm-link-text=\"Remove All\"\r\n            onClick={deleteAll}>\r\n            <span> CHECK LIST</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    \r\n\r\n  </>\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\nimport Todo from './components/ReactTodo/todo'\n\nconst App = () => {\n  return <>\n\n    <Todo />\n\n\n  </>\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}